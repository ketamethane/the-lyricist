// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Lyric is an object representing the database table.
type Lyric struct {
	ID            int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	SongID        null.Int  `boil:"song_id" json:"song_id,omitempty" toml:"song_id" yaml:"song_id,omitempty"`
	LineNumber    null.Int  `boil:"line_number" json:"line_number,omitempty" toml:"line_number" yaml:"line_number,omitempty"`
	Content       null.JSON `boil:"content" json:"content,omitempty" toml:"content" yaml:"content,omitempty"`
	TranslationID null.Int  `boil:"translation_id" json:"translation_id,omitempty" toml:"translation_id" yaml:"translation_id,omitempty"`

	R *lyricR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L lyricL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LyricColumns = struct {
	ID            string
	SongID        string
	LineNumber    string
	Content       string
	TranslationID string
}{
	ID:            "id",
	SongID:        "song_id",
	LineNumber:    "line_number",
	Content:       "content",
	TranslationID: "translation_id",
}

var LyricTableColumns = struct {
	ID            string
	SongID        string
	LineNumber    string
	Content       string
	TranslationID string
}{
	ID:            "lyrics.id",
	SongID:        "lyrics.song_id",
	LineNumber:    "lyrics.line_number",
	Content:       "lyrics.content",
	TranslationID: "lyrics.translation_id",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var LyricWhere = struct {
	ID            whereHelperint
	SongID        whereHelpernull_Int
	LineNumber    whereHelpernull_Int
	Content       whereHelpernull_JSON
	TranslationID whereHelpernull_Int
}{
	ID:            whereHelperint{field: "\"lyrics\".\"id\""},
	SongID:        whereHelpernull_Int{field: "\"lyrics\".\"song_id\""},
	LineNumber:    whereHelpernull_Int{field: "\"lyrics\".\"line_number\""},
	Content:       whereHelpernull_JSON{field: "\"lyrics\".\"content\""},
	TranslationID: whereHelpernull_Int{field: "\"lyrics\".\"translation_id\""},
}

// LyricRels is where relationship names are stored.
var LyricRels = struct {
	Song        string
	Translation string
}{
	Song:        "Song",
	Translation: "Translation",
}

// lyricR is where relationships are stored.
type lyricR struct {
	Song        *Song        `boil:"Song" json:"Song" toml:"Song" yaml:"Song"`
	Translation *Translation `boil:"Translation" json:"Translation" toml:"Translation" yaml:"Translation"`
}

// NewStruct creates a new relationship struct
func (*lyricR) NewStruct() *lyricR {
	return &lyricR{}
}

func (r *lyricR) GetSong() *Song {
	if r == nil {
		return nil
	}
	return r.Song
}

func (r *lyricR) GetTranslation() *Translation {
	if r == nil {
		return nil
	}
	return r.Translation
}

// lyricL is where Load methods for each relationship are stored.
type lyricL struct{}

var (
	lyricAllColumns            = []string{"id", "song_id", "line_number", "content", "translation_id"}
	lyricColumnsWithoutDefault = []string{}
	lyricColumnsWithDefault    = []string{"id", "song_id", "line_number", "content", "translation_id"}
	lyricPrimaryKeyColumns     = []string{"id"}
	lyricGeneratedColumns      = []string{}
)

type (
	// LyricSlice is an alias for a slice of pointers to Lyric.
	// This should almost always be used instead of []Lyric.
	LyricSlice []*Lyric
	// LyricHook is the signature for custom Lyric hook methods
	LyricHook func(context.Context, boil.ContextExecutor, *Lyric) error

	lyricQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	lyricType                 = reflect.TypeOf(&Lyric{})
	lyricMapping              = queries.MakeStructMapping(lyricType)
	lyricPrimaryKeyMapping, _ = queries.BindMapping(lyricType, lyricMapping, lyricPrimaryKeyColumns)
	lyricInsertCacheMut       sync.RWMutex
	lyricInsertCache          = make(map[string]insertCache)
	lyricUpdateCacheMut       sync.RWMutex
	lyricUpdateCache          = make(map[string]updateCache)
	lyricUpsertCacheMut       sync.RWMutex
	lyricUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var lyricAfterSelectMu sync.Mutex
var lyricAfterSelectHooks []LyricHook

var lyricBeforeInsertMu sync.Mutex
var lyricBeforeInsertHooks []LyricHook
var lyricAfterInsertMu sync.Mutex
var lyricAfterInsertHooks []LyricHook

var lyricBeforeUpdateMu sync.Mutex
var lyricBeforeUpdateHooks []LyricHook
var lyricAfterUpdateMu sync.Mutex
var lyricAfterUpdateHooks []LyricHook

var lyricBeforeDeleteMu sync.Mutex
var lyricBeforeDeleteHooks []LyricHook
var lyricAfterDeleteMu sync.Mutex
var lyricAfterDeleteHooks []LyricHook

var lyricBeforeUpsertMu sync.Mutex
var lyricBeforeUpsertHooks []LyricHook
var lyricAfterUpsertMu sync.Mutex
var lyricAfterUpsertHooks []LyricHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Lyric) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyricAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Lyric) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyricBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Lyric) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyricAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Lyric) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyricBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Lyric) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyricAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Lyric) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyricBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Lyric) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyricAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Lyric) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyricBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Lyric) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyricAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLyricHook registers your hook function for all future operations.
func AddLyricHook(hookPoint boil.HookPoint, lyricHook LyricHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		lyricAfterSelectMu.Lock()
		lyricAfterSelectHooks = append(lyricAfterSelectHooks, lyricHook)
		lyricAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		lyricBeforeInsertMu.Lock()
		lyricBeforeInsertHooks = append(lyricBeforeInsertHooks, lyricHook)
		lyricBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		lyricAfterInsertMu.Lock()
		lyricAfterInsertHooks = append(lyricAfterInsertHooks, lyricHook)
		lyricAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		lyricBeforeUpdateMu.Lock()
		lyricBeforeUpdateHooks = append(lyricBeforeUpdateHooks, lyricHook)
		lyricBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		lyricAfterUpdateMu.Lock()
		lyricAfterUpdateHooks = append(lyricAfterUpdateHooks, lyricHook)
		lyricAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		lyricBeforeDeleteMu.Lock()
		lyricBeforeDeleteHooks = append(lyricBeforeDeleteHooks, lyricHook)
		lyricBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		lyricAfterDeleteMu.Lock()
		lyricAfterDeleteHooks = append(lyricAfterDeleteHooks, lyricHook)
		lyricAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		lyricBeforeUpsertMu.Lock()
		lyricBeforeUpsertHooks = append(lyricBeforeUpsertHooks, lyricHook)
		lyricBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		lyricAfterUpsertMu.Lock()
		lyricAfterUpsertHooks = append(lyricAfterUpsertHooks, lyricHook)
		lyricAfterUpsertMu.Unlock()
	}
}

// One returns a single lyric record from the query.
func (q lyricQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Lyric, error) {
	o := &Lyric{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for lyrics")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Lyric records from the query.
func (q lyricQuery) All(ctx context.Context, exec boil.ContextExecutor) (LyricSlice, error) {
	var o []*Lyric

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Lyric slice")
	}

	if len(lyricAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Lyric records in the query.
func (q lyricQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count lyrics rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q lyricQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if lyrics exists")
	}

	return count > 0, nil
}

// Song pointed to by the foreign key.
func (o *Lyric) Song(mods ...qm.QueryMod) songQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SongID),
	}

	queryMods = append(queryMods, mods...)

	return Songs(queryMods...)
}

// Translation pointed to by the foreign key.
func (o *Lyric) Translation(mods ...qm.QueryMod) translationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TranslationID),
	}

	queryMods = append(queryMods, mods...)

	return Translations(queryMods...)
}

// LoadSong allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (lyricL) LoadSong(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLyric interface{}, mods queries.Applicator) error {
	var slice []*Lyric
	var object *Lyric

	if singular {
		var ok bool
		object, ok = maybeLyric.(*Lyric)
		if !ok {
			object = new(Lyric)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLyric)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLyric))
			}
		}
	} else {
		s, ok := maybeLyric.(*[]*Lyric)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLyric)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLyric))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &lyricR{}
		}
		if !queries.IsNil(object.SongID) {
			args[object.SongID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lyricR{}
			}

			if !queries.IsNil(obj.SongID) {
				args[obj.SongID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`songs`),
		qm.WhereIn(`songs.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Song")
	}

	var resultSlice []*Song
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Song")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for songs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for songs")
	}

	if len(songAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Song = foreign
		if foreign.R == nil {
			foreign.R = &songR{}
		}
		foreign.R.Lyrics = append(foreign.R.Lyrics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SongID, foreign.ID) {
				local.R.Song = foreign
				if foreign.R == nil {
					foreign.R = &songR{}
				}
				foreign.R.Lyrics = append(foreign.R.Lyrics, local)
				break
			}
		}
	}

	return nil
}

// LoadTranslation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (lyricL) LoadTranslation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLyric interface{}, mods queries.Applicator) error {
	var slice []*Lyric
	var object *Lyric

	if singular {
		var ok bool
		object, ok = maybeLyric.(*Lyric)
		if !ok {
			object = new(Lyric)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLyric)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLyric))
			}
		}
	} else {
		s, ok := maybeLyric.(*[]*Lyric)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLyric)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLyric))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &lyricR{}
		}
		if !queries.IsNil(object.TranslationID) {
			args[object.TranslationID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lyricR{}
			}

			if !queries.IsNil(obj.TranslationID) {
				args[obj.TranslationID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`translations`),
		qm.WhereIn(`translations.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Translation")
	}

	var resultSlice []*Translation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Translation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for translations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for translations")
	}

	if len(translationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Translation = foreign
		if foreign.R == nil {
			foreign.R = &translationR{}
		}
		foreign.R.Lyrics = append(foreign.R.Lyrics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TranslationID, foreign.ID) {
				local.R.Translation = foreign
				if foreign.R == nil {
					foreign.R = &translationR{}
				}
				foreign.R.Lyrics = append(foreign.R.Lyrics, local)
				break
			}
		}
	}

	return nil
}

// SetSong of the lyric to the related item.
// Sets o.R.Song to related.
// Adds o to related.R.Lyrics.
func (o *Lyric) SetSong(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Song) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"lyrics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"song_id"}),
		strmangle.WhereClause("\"", "\"", 2, lyricPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SongID, related.ID)
	if o.R == nil {
		o.R = &lyricR{
			Song: related,
		}
	} else {
		o.R.Song = related
	}

	if related.R == nil {
		related.R = &songR{
			Lyrics: LyricSlice{o},
		}
	} else {
		related.R.Lyrics = append(related.R.Lyrics, o)
	}

	return nil
}

// RemoveSong relationship.
// Sets o.R.Song to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Lyric) RemoveSong(ctx context.Context, exec boil.ContextExecutor, related *Song) error {
	var err error

	queries.SetScanner(&o.SongID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("song_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Song = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Lyrics {
		if queries.Equal(o.SongID, ri.SongID) {
			continue
		}

		ln := len(related.R.Lyrics)
		if ln > 1 && i < ln-1 {
			related.R.Lyrics[i] = related.R.Lyrics[ln-1]
		}
		related.R.Lyrics = related.R.Lyrics[:ln-1]
		break
	}
	return nil
}

// SetTranslation of the lyric to the related item.
// Sets o.R.Translation to related.
// Adds o to related.R.Lyrics.
func (o *Lyric) SetTranslation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Translation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"lyrics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"translation_id"}),
		strmangle.WhereClause("\"", "\"", 2, lyricPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TranslationID, related.ID)
	if o.R == nil {
		o.R = &lyricR{
			Translation: related,
		}
	} else {
		o.R.Translation = related
	}

	if related.R == nil {
		related.R = &translationR{
			Lyrics: LyricSlice{o},
		}
	} else {
		related.R.Lyrics = append(related.R.Lyrics, o)
	}

	return nil
}

// RemoveTranslation relationship.
// Sets o.R.Translation to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Lyric) RemoveTranslation(ctx context.Context, exec boil.ContextExecutor, related *Translation) error {
	var err error

	queries.SetScanner(&o.TranslationID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("translation_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Translation = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Lyrics {
		if queries.Equal(o.TranslationID, ri.TranslationID) {
			continue
		}

		ln := len(related.R.Lyrics)
		if ln > 1 && i < ln-1 {
			related.R.Lyrics[i] = related.R.Lyrics[ln-1]
		}
		related.R.Lyrics = related.R.Lyrics[:ln-1]
		break
	}
	return nil
}

// Lyrics retrieves all the records using an executor.
func Lyrics(mods ...qm.QueryMod) lyricQuery {
	mods = append(mods, qm.From("\"lyrics\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"lyrics\".*"})
	}

	return lyricQuery{q}
}

// FindLyric retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLyric(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Lyric, error) {
	lyricObj := &Lyric{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"lyrics\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, lyricObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from lyrics")
	}

	if err = lyricObj.doAfterSelectHooks(ctx, exec); err != nil {
		return lyricObj, err
	}

	return lyricObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Lyric) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no lyrics provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lyricColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	lyricInsertCacheMut.RLock()
	cache, cached := lyricInsertCache[key]
	lyricInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			lyricAllColumns,
			lyricColumnsWithDefault,
			lyricColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(lyricType, lyricMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(lyricType, lyricMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"lyrics\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"lyrics\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into lyrics")
	}

	if !cached {
		lyricInsertCacheMut.Lock()
		lyricInsertCache[key] = cache
		lyricInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Lyric.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Lyric) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	lyricUpdateCacheMut.RLock()
	cache, cached := lyricUpdateCache[key]
	lyricUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			lyricAllColumns,
			lyricPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update lyrics, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"lyrics\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, lyricPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(lyricType, lyricMapping, append(wl, lyricPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update lyrics row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for lyrics")
	}

	if !cached {
		lyricUpdateCacheMut.Lock()
		lyricUpdateCache[key] = cache
		lyricUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q lyricQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for lyrics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for lyrics")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LyricSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lyricPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"lyrics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, lyricPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in lyric slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all lyric")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Lyric) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no lyrics provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lyricColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	lyricUpsertCacheMut.RLock()
	cache, cached := lyricUpsertCache[key]
	lyricUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			lyricAllColumns,
			lyricColumnsWithDefault,
			lyricColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			lyricAllColumns,
			lyricPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert lyrics, could not build update column list")
		}

		ret := strmangle.SetComplement(lyricAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(lyricPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert lyrics, could not build conflict column list")
			}

			conflict = make([]string, len(lyricPrimaryKeyColumns))
			copy(conflict, lyricPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"lyrics\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(lyricType, lyricMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(lyricType, lyricMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert lyrics")
	}

	if !cached {
		lyricUpsertCacheMut.Lock()
		lyricUpsertCache[key] = cache
		lyricUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Lyric record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Lyric) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Lyric provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), lyricPrimaryKeyMapping)
	sql := "DELETE FROM \"lyrics\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from lyrics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for lyrics")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q lyricQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no lyricQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from lyrics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for lyrics")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LyricSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(lyricBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lyricPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"lyrics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, lyricPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from lyric slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for lyrics")
	}

	if len(lyricAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Lyric) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLyric(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LyricSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LyricSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lyricPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"lyrics\".* FROM \"lyrics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, lyricPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LyricSlice")
	}

	*o = slice

	return nil
}

// LyricExists checks if the Lyric row exists.
func LyricExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"lyrics\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if lyrics exists")
	}

	return exists, nil
}

// Exists checks if the Lyric row exists.
func (o *Lyric) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return LyricExists(ctx, exec, o.ID)
}
