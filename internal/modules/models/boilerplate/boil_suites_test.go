// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Lyrics", testLyrics)
	t.Run("SchemaMigrations", testSchemaMigrations)
	t.Run("Songs", testSongs)
	t.Run("Translations", testTranslations)
}

func TestDelete(t *testing.T) {
	t.Run("Lyrics", testLyricsDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
	t.Run("Songs", testSongsDelete)
	t.Run("Translations", testTranslationsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Lyrics", testLyricsQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
	t.Run("Songs", testSongsQueryDeleteAll)
	t.Run("Translations", testTranslationsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Lyrics", testLyricsSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
	t.Run("Songs", testSongsSliceDeleteAll)
	t.Run("Translations", testTranslationsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Lyrics", testLyricsExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
	t.Run("Songs", testSongsExists)
	t.Run("Translations", testTranslationsExists)
}

func TestFind(t *testing.T) {
	t.Run("Lyrics", testLyricsFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
	t.Run("Songs", testSongsFind)
	t.Run("Translations", testTranslationsFind)
}

func TestBind(t *testing.T) {
	t.Run("Lyrics", testLyricsBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
	t.Run("Songs", testSongsBind)
	t.Run("Translations", testTranslationsBind)
}

func TestOne(t *testing.T) {
	t.Run("Lyrics", testLyricsOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
	t.Run("Songs", testSongsOne)
	t.Run("Translations", testTranslationsOne)
}

func TestAll(t *testing.T) {
	t.Run("Lyrics", testLyricsAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
	t.Run("Songs", testSongsAll)
	t.Run("Translations", testTranslationsAll)
}

func TestCount(t *testing.T) {
	t.Run("Lyrics", testLyricsCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
	t.Run("Songs", testSongsCount)
	t.Run("Translations", testTranslationsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Lyrics", testLyricsHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
	t.Run("Songs", testSongsHooks)
	t.Run("Translations", testTranslationsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Lyrics", testLyricsInsert)
	t.Run("Lyrics", testLyricsInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
	t.Run("Songs", testSongsInsert)
	t.Run("Songs", testSongsInsertWhitelist)
	t.Run("Translations", testTranslationsInsert)
	t.Run("Translations", testTranslationsInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("Lyrics", testLyricsReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
	t.Run("Songs", testSongsReload)
	t.Run("Translations", testTranslationsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Lyrics", testLyricsReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
	t.Run("Songs", testSongsReloadAll)
	t.Run("Translations", testTranslationsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Lyrics", testLyricsSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
	t.Run("Songs", testSongsSelect)
	t.Run("Translations", testTranslationsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Lyrics", testLyricsUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
	t.Run("Songs", testSongsUpdate)
	t.Run("Translations", testTranslationsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Lyrics", testLyricsSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
	t.Run("Songs", testSongsSliceUpdateAll)
	t.Run("Translations", testTranslationsSliceUpdateAll)
}
