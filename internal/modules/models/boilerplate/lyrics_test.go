// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLyrics(t *testing.T) {
	t.Parallel()

	query := Lyrics()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLyricsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lyric{}
	if err = randomize.Struct(seed, o, lyricDBTypes, true, lyricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Lyrics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLyricsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lyric{}
	if err = randomize.Struct(seed, o, lyricDBTypes, true, lyricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Lyrics().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Lyrics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLyricsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lyric{}
	if err = randomize.Struct(seed, o, lyricDBTypes, true, lyricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LyricSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Lyrics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLyricsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lyric{}
	if err = randomize.Struct(seed, o, lyricDBTypes, true, lyricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LyricExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Lyric exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LyricExists to return true, but got false.")
	}
}

func testLyricsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lyric{}
	if err = randomize.Struct(seed, o, lyricDBTypes, true, lyricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	lyricFound, err := FindLyric(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if lyricFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLyricsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lyric{}
	if err = randomize.Struct(seed, o, lyricDBTypes, true, lyricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Lyrics().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testLyricsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lyric{}
	if err = randomize.Struct(seed, o, lyricDBTypes, true, lyricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Lyrics().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLyricsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	lyricOne := &Lyric{}
	lyricTwo := &Lyric{}
	if err = randomize.Struct(seed, lyricOne, lyricDBTypes, false, lyricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}
	if err = randomize.Struct(seed, lyricTwo, lyricDBTypes, false, lyricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = lyricOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = lyricTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Lyrics().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLyricsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	lyricOne := &Lyric{}
	lyricTwo := &Lyric{}
	if err = randomize.Struct(seed, lyricOne, lyricDBTypes, false, lyricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}
	if err = randomize.Struct(seed, lyricTwo, lyricDBTypes, false, lyricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = lyricOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = lyricTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Lyrics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func lyricBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Lyric) error {
	*o = Lyric{}
	return nil
}

func lyricAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Lyric) error {
	*o = Lyric{}
	return nil
}

func lyricAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Lyric) error {
	*o = Lyric{}
	return nil
}

func lyricBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Lyric) error {
	*o = Lyric{}
	return nil
}

func lyricAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Lyric) error {
	*o = Lyric{}
	return nil
}

func lyricBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Lyric) error {
	*o = Lyric{}
	return nil
}

func lyricAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Lyric) error {
	*o = Lyric{}
	return nil
}

func lyricBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Lyric) error {
	*o = Lyric{}
	return nil
}

func lyricAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Lyric) error {
	*o = Lyric{}
	return nil
}

func testLyricsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Lyric{}
	o := &Lyric{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, lyricDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Lyric object: %s", err)
	}

	AddLyricHook(boil.BeforeInsertHook, lyricBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	lyricBeforeInsertHooks = []LyricHook{}

	AddLyricHook(boil.AfterInsertHook, lyricAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	lyricAfterInsertHooks = []LyricHook{}

	AddLyricHook(boil.AfterSelectHook, lyricAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	lyricAfterSelectHooks = []LyricHook{}

	AddLyricHook(boil.BeforeUpdateHook, lyricBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	lyricBeforeUpdateHooks = []LyricHook{}

	AddLyricHook(boil.AfterUpdateHook, lyricAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	lyricAfterUpdateHooks = []LyricHook{}

	AddLyricHook(boil.BeforeDeleteHook, lyricBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	lyricBeforeDeleteHooks = []LyricHook{}

	AddLyricHook(boil.AfterDeleteHook, lyricAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	lyricAfterDeleteHooks = []LyricHook{}

	AddLyricHook(boil.BeforeUpsertHook, lyricBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	lyricBeforeUpsertHooks = []LyricHook{}

	AddLyricHook(boil.AfterUpsertHook, lyricAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	lyricAfterUpsertHooks = []LyricHook{}
}

func testLyricsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lyric{}
	if err = randomize.Struct(seed, o, lyricDBTypes, true, lyricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Lyrics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLyricsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lyric{}
	if err = randomize.Struct(seed, o, lyricDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(lyricColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Lyrics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLyricToOneSongUsingSong(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Lyric
	var foreign Song

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, lyricDBTypes, true, lyricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, songDBTypes, false, songColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Song struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SongID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Song().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddSongHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Song) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := LyricSlice{&local}
	if err = local.L.LoadSong(ctx, tx, false, (*[]*Lyric)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Song == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Song = nil
	if err = local.L.LoadSong(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Song == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testLyricToOneTranslationUsingTranslation(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Lyric
	var foreign Translation

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, lyricDBTypes, true, lyricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, translationDBTypes, false, translationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Translation struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TranslationID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Translation().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddTranslationHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Translation) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := LyricSlice{&local}
	if err = local.L.LoadTranslation(ctx, tx, false, (*[]*Lyric)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Translation == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Translation = nil
	if err = local.L.LoadTranslation(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Translation == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testLyricToOneSetOpSongUsingSong(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Lyric
	var b, c Song

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lyricDBTypes, false, strmangle.SetComplement(lyricPrimaryKeyColumns, lyricColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, songDBTypes, false, strmangle.SetComplement(songPrimaryKeyColumns, songColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, songDBTypes, false, strmangle.SetComplement(songPrimaryKeyColumns, songColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Song{&b, &c} {
		err = a.SetSong(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Song != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Lyrics[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SongID, x.ID) {
			t.Error("foreign key was wrong value", a.SongID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SongID))
		reflect.Indirect(reflect.ValueOf(&a.SongID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SongID, x.ID) {
			t.Error("foreign key was wrong value", a.SongID, x.ID)
		}
	}
}

func testLyricToOneRemoveOpSongUsingSong(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Lyric
	var b Song

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lyricDBTypes, false, strmangle.SetComplement(lyricPrimaryKeyColumns, lyricColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, songDBTypes, false, strmangle.SetComplement(songPrimaryKeyColumns, songColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSong(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSong(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Song().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Song != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SongID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Lyrics) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testLyricToOneSetOpTranslationUsingTranslation(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Lyric
	var b, c Translation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lyricDBTypes, false, strmangle.SetComplement(lyricPrimaryKeyColumns, lyricColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, translationDBTypes, false, strmangle.SetComplement(translationPrimaryKeyColumns, translationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, translationDBTypes, false, strmangle.SetComplement(translationPrimaryKeyColumns, translationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Translation{&b, &c} {
		err = a.SetTranslation(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Translation != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Lyrics[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TranslationID, x.ID) {
			t.Error("foreign key was wrong value", a.TranslationID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TranslationID))
		reflect.Indirect(reflect.ValueOf(&a.TranslationID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TranslationID, x.ID) {
			t.Error("foreign key was wrong value", a.TranslationID, x.ID)
		}
	}
}

func testLyricToOneRemoveOpTranslationUsingTranslation(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Lyric
	var b Translation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lyricDBTypes, false, strmangle.SetComplement(lyricPrimaryKeyColumns, lyricColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, translationDBTypes, false, strmangle.SetComplement(translationPrimaryKeyColumns, translationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTranslation(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTranslation(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Translation().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Translation != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TranslationID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Lyrics) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testLyricsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lyric{}
	if err = randomize.Struct(seed, o, lyricDBTypes, true, lyricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLyricsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lyric{}
	if err = randomize.Struct(seed, o, lyricDBTypes, true, lyricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LyricSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLyricsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lyric{}
	if err = randomize.Struct(seed, o, lyricDBTypes, true, lyricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Lyrics().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	lyricDBTypes = map[string]string{`ID`: `integer`, `SongID`: `integer`, `LineNumber`: `integer`, `Content`: `jsonb`, `TranslationID`: `integer`}
	_            = bytes.MinRead
)

func testLyricsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(lyricPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(lyricAllColumns) == len(lyricPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Lyric{}
	if err = randomize.Struct(seed, o, lyricDBTypes, true, lyricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Lyrics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, lyricDBTypes, true, lyricPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLyricsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(lyricAllColumns) == len(lyricPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Lyric{}
	if err = randomize.Struct(seed, o, lyricDBTypes, true, lyricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Lyrics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, lyricDBTypes, true, lyricPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(lyricAllColumns, lyricPrimaryKeyColumns) {
		fields = lyricAllColumns
	} else {
		fields = strmangle.SetComplement(
			lyricAllColumns,
			lyricPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LyricSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testLyricsUpsert(t *testing.T) {
	t.Parallel()

	if len(lyricAllColumns) == len(lyricPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Lyric{}
	if err = randomize.Struct(seed, &o, lyricDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Lyric: %s", err)
	}

	count, err := Lyrics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, lyricDBTypes, false, lyricPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Lyric struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Lyric: %s", err)
	}

	count, err = Lyrics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
