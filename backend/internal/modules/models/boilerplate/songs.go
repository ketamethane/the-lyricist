// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Song is an object representing the database table.
type Song struct {
	ID       int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title    null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Anime    null.String `boil:"anime" json:"anime,omitempty" toml:"anime" yaml:"anime,omitempty"`
	Released null.Time   `boil:"released" json:"released,omitempty" toml:"released" yaml:"released,omitempty"`

	R *songR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L songL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SongColumns = struct {
	ID       string
	Title    string
	Anime    string
	Released string
}{
	ID:       "id",
	Title:    "title",
	Anime:    "anime",
	Released: "released",
}

var SongTableColumns = struct {
	ID       string
	Title    string
	Anime    string
	Released string
}{
	ID:       "songs.id",
	Title:    "songs.title",
	Anime:    "songs.anime",
	Released: "songs.released",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var SongWhere = struct {
	ID       whereHelperint
	Title    whereHelpernull_String
	Anime    whereHelpernull_String
	Released whereHelpernull_Time
}{
	ID:       whereHelperint{field: "\"songs\".\"id\""},
	Title:    whereHelpernull_String{field: "\"songs\".\"title\""},
	Anime:    whereHelpernull_String{field: "\"songs\".\"anime\""},
	Released: whereHelpernull_Time{field: "\"songs\".\"released\""},
}

// SongRels is where relationship names are stored.
var SongRels = struct {
	Lyrics       string
	Translations string
}{
	Lyrics:       "Lyrics",
	Translations: "Translations",
}

// songR is where relationships are stored.
type songR struct {
	Lyrics       LyricSlice       `boil:"Lyrics" json:"Lyrics" toml:"Lyrics" yaml:"Lyrics"`
	Translations TranslationSlice `boil:"Translations" json:"Translations" toml:"Translations" yaml:"Translations"`
}

// NewStruct creates a new relationship struct
func (*songR) NewStruct() *songR {
	return &songR{}
}

func (r *songR) GetLyrics() LyricSlice {
	if r == nil {
		return nil
	}
	return r.Lyrics
}

func (r *songR) GetTranslations() TranslationSlice {
	if r == nil {
		return nil
	}
	return r.Translations
}

// songL is where Load methods for each relationship are stored.
type songL struct{}

var (
	songAllColumns            = []string{"id", "title", "anime", "released"}
	songColumnsWithoutDefault = []string{}
	songColumnsWithDefault    = []string{"id", "title", "anime", "released"}
	songPrimaryKeyColumns     = []string{"id"}
	songGeneratedColumns      = []string{}
)

type (
	// SongSlice is an alias for a slice of pointers to Song.
	// This should almost always be used instead of []Song.
	SongSlice []*Song
	// SongHook is the signature for custom Song hook methods
	SongHook func(context.Context, boil.ContextExecutor, *Song) error

	songQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	songType                 = reflect.TypeOf(&Song{})
	songMapping              = queries.MakeStructMapping(songType)
	songPrimaryKeyMapping, _ = queries.BindMapping(songType, songMapping, songPrimaryKeyColumns)
	songInsertCacheMut       sync.RWMutex
	songInsertCache          = make(map[string]insertCache)
	songUpdateCacheMut       sync.RWMutex
	songUpdateCache          = make(map[string]updateCache)
	songUpsertCacheMut       sync.RWMutex
	songUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var songAfterSelectMu sync.Mutex
var songAfterSelectHooks []SongHook

var songBeforeInsertMu sync.Mutex
var songBeforeInsertHooks []SongHook
var songAfterInsertMu sync.Mutex
var songAfterInsertHooks []SongHook

var songBeforeUpdateMu sync.Mutex
var songBeforeUpdateHooks []SongHook
var songAfterUpdateMu sync.Mutex
var songAfterUpdateHooks []SongHook

var songBeforeDeleteMu sync.Mutex
var songBeforeDeleteHooks []SongHook
var songAfterDeleteMu sync.Mutex
var songAfterDeleteHooks []SongHook

var songBeforeUpsertMu sync.Mutex
var songBeforeUpsertHooks []SongHook
var songAfterUpsertMu sync.Mutex
var songAfterUpsertHooks []SongHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Song) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Song) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Song) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Song) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Song) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Song) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Song) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Song) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Song) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range songAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSongHook registers your hook function for all future operations.
func AddSongHook(hookPoint boil.HookPoint, songHook SongHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		songAfterSelectMu.Lock()
		songAfterSelectHooks = append(songAfterSelectHooks, songHook)
		songAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		songBeforeInsertMu.Lock()
		songBeforeInsertHooks = append(songBeforeInsertHooks, songHook)
		songBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		songAfterInsertMu.Lock()
		songAfterInsertHooks = append(songAfterInsertHooks, songHook)
		songAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		songBeforeUpdateMu.Lock()
		songBeforeUpdateHooks = append(songBeforeUpdateHooks, songHook)
		songBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		songAfterUpdateMu.Lock()
		songAfterUpdateHooks = append(songAfterUpdateHooks, songHook)
		songAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		songBeforeDeleteMu.Lock()
		songBeforeDeleteHooks = append(songBeforeDeleteHooks, songHook)
		songBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		songAfterDeleteMu.Lock()
		songAfterDeleteHooks = append(songAfterDeleteHooks, songHook)
		songAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		songBeforeUpsertMu.Lock()
		songBeforeUpsertHooks = append(songBeforeUpsertHooks, songHook)
		songBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		songAfterUpsertMu.Lock()
		songAfterUpsertHooks = append(songAfterUpsertHooks, songHook)
		songAfterUpsertMu.Unlock()
	}
}

// One returns a single song record from the query.
func (q songQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Song, error) {
	o := &Song{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for songs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Song records from the query.
func (q songQuery) All(ctx context.Context, exec boil.ContextExecutor) (SongSlice, error) {
	var o []*Song

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Song slice")
	}

	if len(songAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Song records in the query.
func (q songQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count songs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q songQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if songs exists")
	}

	return count > 0, nil
}

// Lyrics retrieves all the lyric's Lyrics with an executor.
func (o *Song) Lyrics(mods ...qm.QueryMod) lyricQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"lyrics\".\"song_id\"=?", o.ID),
	)

	return Lyrics(queryMods...)
}

// Translations retrieves all the translation's Translations with an executor.
func (o *Song) Translations(mods ...qm.QueryMod) translationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"translations\".\"song_id\"=?", o.ID),
	)

	return Translations(queryMods...)
}

// LoadLyrics allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (songL) LoadLyrics(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSong interface{}, mods queries.Applicator) error {
	var slice []*Song
	var object *Song

	if singular {
		var ok bool
		object, ok = maybeSong.(*Song)
		if !ok {
			object = new(Song)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSong)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSong))
			}
		}
	} else {
		s, ok := maybeSong.(*[]*Song)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSong)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSong))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &songR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &songR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`lyrics`),
		qm.WhereIn(`lyrics.song_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load lyrics")
	}

	var resultSlice []*Lyric
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice lyrics")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on lyrics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for lyrics")
	}

	if len(lyricAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Lyrics = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &lyricR{}
			}
			foreign.R.Song = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SongID) {
				local.R.Lyrics = append(local.R.Lyrics, foreign)
				if foreign.R == nil {
					foreign.R = &lyricR{}
				}
				foreign.R.Song = local
				break
			}
		}
	}

	return nil
}

// LoadTranslations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (songL) LoadTranslations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSong interface{}, mods queries.Applicator) error {
	var slice []*Song
	var object *Song

	if singular {
		var ok bool
		object, ok = maybeSong.(*Song)
		if !ok {
			object = new(Song)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSong)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSong))
			}
		}
	} else {
		s, ok := maybeSong.(*[]*Song)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSong)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSong))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &songR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &songR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`translations`),
		qm.WhereIn(`translations.song_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load translations")
	}

	var resultSlice []*Translation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice translations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on translations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for translations")
	}

	if len(translationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Translations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &translationR{}
			}
			foreign.R.Song = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SongID) {
				local.R.Translations = append(local.R.Translations, foreign)
				if foreign.R == nil {
					foreign.R = &translationR{}
				}
				foreign.R.Song = local
				break
			}
		}
	}

	return nil
}

// AddLyrics adds the given related objects to the existing relationships
// of the song, optionally inserting them as new records.
// Appends related to o.R.Lyrics.
// Sets related.R.Song appropriately.
func (o *Song) AddLyrics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Lyric) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SongID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"lyrics\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"song_id"}),
				strmangle.WhereClause("\"", "\"", 2, lyricPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SongID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &songR{
			Lyrics: related,
		}
	} else {
		o.R.Lyrics = append(o.R.Lyrics, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &lyricR{
				Song: o,
			}
		} else {
			rel.R.Song = o
		}
	}
	return nil
}

// SetLyrics removes all previously related items of the
// song replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Song's Lyrics accordingly.
// Replaces o.R.Lyrics with related.
// Sets related.R.Song's Lyrics accordingly.
func (o *Song) SetLyrics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Lyric) error {
	query := "update \"lyrics\" set \"song_id\" = null where \"song_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Lyrics {
			queries.SetScanner(&rel.SongID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Song = nil
		}
		o.R.Lyrics = nil
	}

	return o.AddLyrics(ctx, exec, insert, related...)
}

// RemoveLyrics relationships from objects passed in.
// Removes related items from R.Lyrics (uses pointer comparison, removal does not keep order)
// Sets related.R.Song.
func (o *Song) RemoveLyrics(ctx context.Context, exec boil.ContextExecutor, related ...*Lyric) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SongID, nil)
		if rel.R != nil {
			rel.R.Song = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("song_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Lyrics {
			if rel != ri {
				continue
			}

			ln := len(o.R.Lyrics)
			if ln > 1 && i < ln-1 {
				o.R.Lyrics[i] = o.R.Lyrics[ln-1]
			}
			o.R.Lyrics = o.R.Lyrics[:ln-1]
			break
		}
	}

	return nil
}

// AddTranslations adds the given related objects to the existing relationships
// of the song, optionally inserting them as new records.
// Appends related to o.R.Translations.
// Sets related.R.Song appropriately.
func (o *Song) AddTranslations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Translation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SongID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"translations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"song_id"}),
				strmangle.WhereClause("\"", "\"", 2, translationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SongID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &songR{
			Translations: related,
		}
	} else {
		o.R.Translations = append(o.R.Translations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &translationR{
				Song: o,
			}
		} else {
			rel.R.Song = o
		}
	}
	return nil
}

// SetTranslations removes all previously related items of the
// song replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Song's Translations accordingly.
// Replaces o.R.Translations with related.
// Sets related.R.Song's Translations accordingly.
func (o *Song) SetTranslations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Translation) error {
	query := "update \"translations\" set \"song_id\" = null where \"song_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Translations {
			queries.SetScanner(&rel.SongID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Song = nil
		}
		o.R.Translations = nil
	}

	return o.AddTranslations(ctx, exec, insert, related...)
}

// RemoveTranslations relationships from objects passed in.
// Removes related items from R.Translations (uses pointer comparison, removal does not keep order)
// Sets related.R.Song.
func (o *Song) RemoveTranslations(ctx context.Context, exec boil.ContextExecutor, related ...*Translation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SongID, nil)
		if rel.R != nil {
			rel.R.Song = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("song_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Translations {
			if rel != ri {
				continue
			}

			ln := len(o.R.Translations)
			if ln > 1 && i < ln-1 {
				o.R.Translations[i] = o.R.Translations[ln-1]
			}
			o.R.Translations = o.R.Translations[:ln-1]
			break
		}
	}

	return nil
}

// Songs retrieves all the records using an executor.
func Songs(mods ...qm.QueryMod) songQuery {
	mods = append(mods, qm.From("\"songs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"songs\".*"})
	}

	return songQuery{q}
}

// FindSong retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSong(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Song, error) {
	songObj := &Song{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"songs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, songObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from songs")
	}

	if err = songObj.doAfterSelectHooks(ctx, exec); err != nil {
		return songObj, err
	}

	return songObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Song) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no songs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(songColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	songInsertCacheMut.RLock()
	cache, cached := songInsertCache[key]
	songInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			songAllColumns,
			songColumnsWithDefault,
			songColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(songType, songMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(songType, songMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"songs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"songs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into songs")
	}

	if !cached {
		songInsertCacheMut.Lock()
		songInsertCache[key] = cache
		songInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Song.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Song) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	songUpdateCacheMut.RLock()
	cache, cached := songUpdateCache[key]
	songUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			songAllColumns,
			songPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update songs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"songs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, songPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(songType, songMapping, append(wl, songPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update songs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for songs")
	}

	if !cached {
		songUpdateCacheMut.Lock()
		songUpdateCache[key] = cache
		songUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q songQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for songs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for songs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SongSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"songs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, songPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in song slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all song")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Song) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no songs provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(songColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	songUpsertCacheMut.RLock()
	cache, cached := songUpsertCache[key]
	songUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			songAllColumns,
			songColumnsWithDefault,
			songColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			songAllColumns,
			songPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert songs, could not build update column list")
		}

		ret := strmangle.SetComplement(songAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(songPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert songs, could not build conflict column list")
			}

			conflict = make([]string, len(songPrimaryKeyColumns))
			copy(conflict, songPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"songs\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(songType, songMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(songType, songMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert songs")
	}

	if !cached {
		songUpsertCacheMut.Lock()
		songUpsertCache[key] = cache
		songUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Song record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Song) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Song provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), songPrimaryKeyMapping)
	sql := "DELETE FROM \"songs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from songs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for songs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q songQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no songQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from songs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for songs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SongSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(songBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"songs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, songPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from song slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for songs")
	}

	if len(songAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Song) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSong(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SongSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SongSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), songPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"songs\".* FROM \"songs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, songPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SongSlice")
	}

	*o = slice

	return nil
}

// SongExists checks if the Song row exists.
func SongExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"songs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if songs exists")
	}

	return exists, nil
}

// Exists checks if the Song row exists.
func (o *Song) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SongExists(ctx, exec, o.ID)
}
