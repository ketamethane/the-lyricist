// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Translation is an object representing the database table.
type Translation struct {
	ID         int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	SongID     null.Int    `boil:"song_id" json:"song_id,omitempty" toml:"song_id" yaml:"song_id,omitempty"`
	Title      null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Language   null.String `boil:"language" json:"language,omitempty" toml:"language" yaml:"language,omitempty"`
	Content    null.JSON   `boil:"content" json:"content,omitempty" toml:"content" yaml:"content,omitempty"`
	Composers  null.JSON   `boil:"composers" json:"composers,omitempty" toml:"composers" yaml:"composers,omitempty"`
	LyricsFull null.JSON   `boil:"lyrics_full" json:"lyrics_full,omitempty" toml:"lyrics_full" yaml:"lyrics_full,omitempty"`
	Producers  null.JSON   `boil:"producers" json:"producers,omitempty" toml:"producers" yaml:"producers,omitempty"`
	VideoLink  null.String `boil:"video_link" json:"video_link,omitempty" toml:"video_link" yaml:"video_link,omitempty"`

	R *translationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L translationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TranslationColumns = struct {
	ID         string
	SongID     string
	Title      string
	Language   string
	Content    string
	Composers  string
	LyricsFull string
	Producers  string
	VideoLink  string
}{
	ID:         "id",
	SongID:     "song_id",
	Title:      "title",
	Language:   "language",
	Content:    "content",
	Composers:  "composers",
	LyricsFull: "lyrics_full",
	Producers:  "producers",
	VideoLink:  "video_link",
}

var TranslationTableColumns = struct {
	ID         string
	SongID     string
	Title      string
	Language   string
	Content    string
	Composers  string
	LyricsFull string
	Producers  string
	VideoLink  string
}{
	ID:         "translations.id",
	SongID:     "translations.song_id",
	Title:      "translations.title",
	Language:   "translations.language",
	Content:    "translations.content",
	Composers:  "translations.composers",
	LyricsFull: "translations.lyrics_full",
	Producers:  "translations.producers",
	VideoLink:  "translations.video_link",
}

// Generated where

var TranslationWhere = struct {
	ID         whereHelperint
	SongID     whereHelpernull_Int
	Title      whereHelpernull_String
	Language   whereHelpernull_String
	Content    whereHelpernull_JSON
	Composers  whereHelpernull_JSON
	LyricsFull whereHelpernull_JSON
	Producers  whereHelpernull_JSON
	VideoLink  whereHelpernull_String
}{
	ID:         whereHelperint{field: "\"translations\".\"id\""},
	SongID:     whereHelpernull_Int{field: "\"translations\".\"song_id\""},
	Title:      whereHelpernull_String{field: "\"translations\".\"title\""},
	Language:   whereHelpernull_String{field: "\"translations\".\"language\""},
	Content:    whereHelpernull_JSON{field: "\"translations\".\"content\""},
	Composers:  whereHelpernull_JSON{field: "\"translations\".\"composers\""},
	LyricsFull: whereHelpernull_JSON{field: "\"translations\".\"lyrics_full\""},
	Producers:  whereHelpernull_JSON{field: "\"translations\".\"producers\""},
	VideoLink:  whereHelpernull_String{field: "\"translations\".\"video_link\""},
}

// TranslationRels is where relationship names are stored.
var TranslationRels = struct {
	Song   string
	Lyrics string
}{
	Song:   "Song",
	Lyrics: "Lyrics",
}

// translationR is where relationships are stored.
type translationR struct {
	Song   *Song      `boil:"Song" json:"Song" toml:"Song" yaml:"Song"`
	Lyrics LyricSlice `boil:"Lyrics" json:"Lyrics" toml:"Lyrics" yaml:"Lyrics"`
}

// NewStruct creates a new relationship struct
func (*translationR) NewStruct() *translationR {
	return &translationR{}
}

func (r *translationR) GetSong() *Song {
	if r == nil {
		return nil
	}
	return r.Song
}

func (r *translationR) GetLyrics() LyricSlice {
	if r == nil {
		return nil
	}
	return r.Lyrics
}

// translationL is where Load methods for each relationship are stored.
type translationL struct{}

var (
	translationAllColumns            = []string{"id", "song_id", "title", "language", "content", "composers", "lyrics_full", "producers", "video_link"}
	translationColumnsWithoutDefault = []string{}
	translationColumnsWithDefault    = []string{"id", "song_id", "title", "language", "content", "composers", "lyrics_full", "producers", "video_link"}
	translationPrimaryKeyColumns     = []string{"id"}
	translationGeneratedColumns      = []string{}
)

type (
	// TranslationSlice is an alias for a slice of pointers to Translation.
	// This should almost always be used instead of []Translation.
	TranslationSlice []*Translation
	// TranslationHook is the signature for custom Translation hook methods
	TranslationHook func(context.Context, boil.ContextExecutor, *Translation) error

	translationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	translationType                 = reflect.TypeOf(&Translation{})
	translationMapping              = queries.MakeStructMapping(translationType)
	translationPrimaryKeyMapping, _ = queries.BindMapping(translationType, translationMapping, translationPrimaryKeyColumns)
	translationInsertCacheMut       sync.RWMutex
	translationInsertCache          = make(map[string]insertCache)
	translationUpdateCacheMut       sync.RWMutex
	translationUpdateCache          = make(map[string]updateCache)
	translationUpsertCacheMut       sync.RWMutex
	translationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var translationAfterSelectMu sync.Mutex
var translationAfterSelectHooks []TranslationHook

var translationBeforeInsertMu sync.Mutex
var translationBeforeInsertHooks []TranslationHook
var translationAfterInsertMu sync.Mutex
var translationAfterInsertHooks []TranslationHook

var translationBeforeUpdateMu sync.Mutex
var translationBeforeUpdateHooks []TranslationHook
var translationAfterUpdateMu sync.Mutex
var translationAfterUpdateHooks []TranslationHook

var translationBeforeDeleteMu sync.Mutex
var translationBeforeDeleteHooks []TranslationHook
var translationAfterDeleteMu sync.Mutex
var translationAfterDeleteHooks []TranslationHook

var translationBeforeUpsertMu sync.Mutex
var translationBeforeUpsertHooks []TranslationHook
var translationAfterUpsertMu sync.Mutex
var translationAfterUpsertHooks []TranslationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Translation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range translationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Translation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range translationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Translation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range translationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Translation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range translationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Translation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range translationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Translation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range translationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Translation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range translationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Translation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range translationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Translation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range translationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTranslationHook registers your hook function for all future operations.
func AddTranslationHook(hookPoint boil.HookPoint, translationHook TranslationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		translationAfterSelectMu.Lock()
		translationAfterSelectHooks = append(translationAfterSelectHooks, translationHook)
		translationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		translationBeforeInsertMu.Lock()
		translationBeforeInsertHooks = append(translationBeforeInsertHooks, translationHook)
		translationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		translationAfterInsertMu.Lock()
		translationAfterInsertHooks = append(translationAfterInsertHooks, translationHook)
		translationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		translationBeforeUpdateMu.Lock()
		translationBeforeUpdateHooks = append(translationBeforeUpdateHooks, translationHook)
		translationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		translationAfterUpdateMu.Lock()
		translationAfterUpdateHooks = append(translationAfterUpdateHooks, translationHook)
		translationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		translationBeforeDeleteMu.Lock()
		translationBeforeDeleteHooks = append(translationBeforeDeleteHooks, translationHook)
		translationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		translationAfterDeleteMu.Lock()
		translationAfterDeleteHooks = append(translationAfterDeleteHooks, translationHook)
		translationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		translationBeforeUpsertMu.Lock()
		translationBeforeUpsertHooks = append(translationBeforeUpsertHooks, translationHook)
		translationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		translationAfterUpsertMu.Lock()
		translationAfterUpsertHooks = append(translationAfterUpsertHooks, translationHook)
		translationAfterUpsertMu.Unlock()
	}
}

// One returns a single translation record from the query.
func (q translationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Translation, error) {
	o := &Translation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for translations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Translation records from the query.
func (q translationQuery) All(ctx context.Context, exec boil.ContextExecutor) (TranslationSlice, error) {
	var o []*Translation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Translation slice")
	}

	if len(translationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Translation records in the query.
func (q translationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count translations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q translationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if translations exists")
	}

	return count > 0, nil
}

// Song pointed to by the foreign key.
func (o *Translation) Song(mods ...qm.QueryMod) songQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SongID),
	}

	queryMods = append(queryMods, mods...)

	return Songs(queryMods...)
}

// Lyrics retrieves all the lyric's Lyrics with an executor.
func (o *Translation) Lyrics(mods ...qm.QueryMod) lyricQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"lyrics\".\"translation_id\"=?", o.ID),
	)

	return Lyrics(queryMods...)
}

// LoadSong allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (translationL) LoadSong(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTranslation interface{}, mods queries.Applicator) error {
	var slice []*Translation
	var object *Translation

	if singular {
		var ok bool
		object, ok = maybeTranslation.(*Translation)
		if !ok {
			object = new(Translation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTranslation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTranslation))
			}
		}
	} else {
		s, ok := maybeTranslation.(*[]*Translation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTranslation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTranslation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &translationR{}
		}
		if !queries.IsNil(object.SongID) {
			args[object.SongID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &translationR{}
			}

			if !queries.IsNil(obj.SongID) {
				args[obj.SongID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`songs`),
		qm.WhereIn(`songs.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Song")
	}

	var resultSlice []*Song
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Song")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for songs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for songs")
	}

	if len(songAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Song = foreign
		if foreign.R == nil {
			foreign.R = &songR{}
		}
		foreign.R.Translations = append(foreign.R.Translations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SongID, foreign.ID) {
				local.R.Song = foreign
				if foreign.R == nil {
					foreign.R = &songR{}
				}
				foreign.R.Translations = append(foreign.R.Translations, local)
				break
			}
		}
	}

	return nil
}

// LoadLyrics allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (translationL) LoadLyrics(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTranslation interface{}, mods queries.Applicator) error {
	var slice []*Translation
	var object *Translation

	if singular {
		var ok bool
		object, ok = maybeTranslation.(*Translation)
		if !ok {
			object = new(Translation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTranslation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTranslation))
			}
		}
	} else {
		s, ok := maybeTranslation.(*[]*Translation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTranslation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTranslation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &translationR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &translationR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`lyrics`),
		qm.WhereIn(`lyrics.translation_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load lyrics")
	}

	var resultSlice []*Lyric
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice lyrics")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on lyrics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for lyrics")
	}

	if len(lyricAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Lyrics = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &lyricR{}
			}
			foreign.R.Translation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TranslationID) {
				local.R.Lyrics = append(local.R.Lyrics, foreign)
				if foreign.R == nil {
					foreign.R = &lyricR{}
				}
				foreign.R.Translation = local
				break
			}
		}
	}

	return nil
}

// SetSong of the translation to the related item.
// Sets o.R.Song to related.
// Adds o to related.R.Translations.
func (o *Translation) SetSong(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Song) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"translations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"song_id"}),
		strmangle.WhereClause("\"", "\"", 2, translationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SongID, related.ID)
	if o.R == nil {
		o.R = &translationR{
			Song: related,
		}
	} else {
		o.R.Song = related
	}

	if related.R == nil {
		related.R = &songR{
			Translations: TranslationSlice{o},
		}
	} else {
		related.R.Translations = append(related.R.Translations, o)
	}

	return nil
}

// RemoveSong relationship.
// Sets o.R.Song to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Translation) RemoveSong(ctx context.Context, exec boil.ContextExecutor, related *Song) error {
	var err error

	queries.SetScanner(&o.SongID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("song_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Song = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Translations {
		if queries.Equal(o.SongID, ri.SongID) {
			continue
		}

		ln := len(related.R.Translations)
		if ln > 1 && i < ln-1 {
			related.R.Translations[i] = related.R.Translations[ln-1]
		}
		related.R.Translations = related.R.Translations[:ln-1]
		break
	}
	return nil
}

// AddLyrics adds the given related objects to the existing relationships
// of the translation, optionally inserting them as new records.
// Appends related to o.R.Lyrics.
// Sets related.R.Translation appropriately.
func (o *Translation) AddLyrics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Lyric) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TranslationID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"lyrics\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"translation_id"}),
				strmangle.WhereClause("\"", "\"", 2, lyricPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TranslationID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &translationR{
			Lyrics: related,
		}
	} else {
		o.R.Lyrics = append(o.R.Lyrics, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &lyricR{
				Translation: o,
			}
		} else {
			rel.R.Translation = o
		}
	}
	return nil
}

// SetLyrics removes all previously related items of the
// translation replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Translation's Lyrics accordingly.
// Replaces o.R.Lyrics with related.
// Sets related.R.Translation's Lyrics accordingly.
func (o *Translation) SetLyrics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Lyric) error {
	query := "update \"lyrics\" set \"translation_id\" = null where \"translation_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Lyrics {
			queries.SetScanner(&rel.TranslationID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Translation = nil
		}
		o.R.Lyrics = nil
	}

	return o.AddLyrics(ctx, exec, insert, related...)
}

// RemoveLyrics relationships from objects passed in.
// Removes related items from R.Lyrics (uses pointer comparison, removal does not keep order)
// Sets related.R.Translation.
func (o *Translation) RemoveLyrics(ctx context.Context, exec boil.ContextExecutor, related ...*Lyric) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TranslationID, nil)
		if rel.R != nil {
			rel.R.Translation = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("translation_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Lyrics {
			if rel != ri {
				continue
			}

			ln := len(o.R.Lyrics)
			if ln > 1 && i < ln-1 {
				o.R.Lyrics[i] = o.R.Lyrics[ln-1]
			}
			o.R.Lyrics = o.R.Lyrics[:ln-1]
			break
		}
	}

	return nil
}

// Translations retrieves all the records using an executor.
func Translations(mods ...qm.QueryMod) translationQuery {
	mods = append(mods, qm.From("\"translations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"translations\".*"})
	}

	return translationQuery{q}
}

// FindTranslation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTranslation(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Translation, error) {
	translationObj := &Translation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"translations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, translationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from translations")
	}

	if err = translationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return translationObj, err
	}

	return translationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Translation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no translations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(translationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	translationInsertCacheMut.RLock()
	cache, cached := translationInsertCache[key]
	translationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			translationAllColumns,
			translationColumnsWithDefault,
			translationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(translationType, translationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(translationType, translationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"translations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"translations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into translations")
	}

	if !cached {
		translationInsertCacheMut.Lock()
		translationInsertCache[key] = cache
		translationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Translation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Translation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	translationUpdateCacheMut.RLock()
	cache, cached := translationUpdateCache[key]
	translationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			translationAllColumns,
			translationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update translations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"translations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, translationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(translationType, translationMapping, append(wl, translationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update translations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for translations")
	}

	if !cached {
		translationUpdateCacheMut.Lock()
		translationUpdateCache[key] = cache
		translationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q translationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for translations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TranslationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), translationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"translations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, translationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in translation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all translation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Translation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no translations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(translationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	translationUpsertCacheMut.RLock()
	cache, cached := translationUpsertCache[key]
	translationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			translationAllColumns,
			translationColumnsWithDefault,
			translationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			translationAllColumns,
			translationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert translations, could not build update column list")
		}

		ret := strmangle.SetComplement(translationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(translationPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert translations, could not build conflict column list")
			}

			conflict = make([]string, len(translationPrimaryKeyColumns))
			copy(conflict, translationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"translations\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(translationType, translationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(translationType, translationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert translations")
	}

	if !cached {
		translationUpsertCacheMut.Lock()
		translationUpsertCache[key] = cache
		translationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Translation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Translation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Translation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), translationPrimaryKeyMapping)
	sql := "DELETE FROM \"translations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for translations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q translationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no translationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for translations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TranslationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(translationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), translationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"translations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, translationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from translation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for translations")
	}

	if len(translationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Translation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTranslation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TranslationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TranslationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), translationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"translations\".* FROM \"translations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, translationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TranslationSlice")
	}

	*o = slice

	return nil
}

// TranslationExists checks if the Translation row exists.
func TranslationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"translations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if translations exists")
	}

	return exists, nil
}

// Exists checks if the Translation row exists.
func (o *Translation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TranslationExists(ctx, exec, o.ID)
}
